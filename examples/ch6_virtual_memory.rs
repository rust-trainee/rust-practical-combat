/**
和虚拟内存有关的一些术语
- 页: 在实际内存中的固定大小的字块. 以64 位操作系统为例, 典型值是4 KB
- 字: 与指针大小相同的任何类型. 这对应于 CPU 寄存器的宽度. 在 Rust 中 usize 和 isize 都是一个字的长度
- 页错误: 当请求的一个有效内存地址不在当前的物理 RAM 中时,CPU 就会发生此错误.这就会向操作系统发出错误型号, 必须至少奖一个页交换回内存中.
- 页交换: 当请求的时候,从主存中迁移一个页的内存数据,将其临时存储在磁盘上
- 虚拟内存: 从应用程序的角度看到的内存视图. 一个应用程序能访问到的全部数据,都是卫浴该程序本身的地址空间中的,而这个地址空间是由操作系统提供的.
- 实际内存: 从操作系统的角度看到的该系统中可用的物理内存.
- 页表: 由操作系统负责维护的一个数据结,用来管理从虚拟内存到实际内存的地址翻译.
- 段: 一个段就是虚拟内存中的一个块.虚拟内存被分成了许多块,这样可以尽量的减小在虚拟内存地址和物理地址之间的地址所需的空间
- 段错误: 当请求了一个非法的内存地址时,CPU 就会发生一个段错误
- MMU: 内存管理单元, 是 CPU 的一个组件,用于管理内存地址翻译的.
*/
fn main() {
    // 扫描内存
    let mut n_nonzero = 0;

    // 如果 CPU 和操作系统检测到你的程序视图访问其无权访问的内存区域, 就会产生段错误
    for i in 1..10000 {
        let ptr = i as *const u8;
        let byte_at_addr = unsafe { *ptr };

        if byte_at_addr != 0 {
            n_nonzero += 1;
        }
    }

    println!("non-zero bytes in memory: {}", n_nonzero);
}
