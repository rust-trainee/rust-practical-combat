/// Rust 中的原始指针
/// 原始指针是一个没有Rust 的标准保证的内存地址. 它们在本质上是不安全的
///
/// 两个知识点:
/// - *const T 和 *mut T 的差别很小. 它们可以彼此自由转换, 并且可以互换使用
/// - Rust 的引用(&mut T 和&T) 会被向下编译为原始指针. 这意味着不需要冒险使用 unsafe,
/// 就可以得到原始指针的性能.
///
///
///
/// 可以使用原始指针的场景
/// - 与操作系统调用或者是某些第三方的代码需要用到原始指针.
/// - 当共享访问某些数据是必须的,并且运行时性能又非常的关键的时候
fn main() {
    let a: i64 = 42;
    let a_ptr = &a as *const i64;
    let a_addr: usize = unsafe { std::mem::transmute(a_ptr) };
    println!("a: {}, ({:p}) 0x{:x}", a, a_ptr, a_addr);
}
